//
//  GroupDetailBoard.swift
//  WeAct
//
//  Created by ÏµúÏäπÏïÑ on 7/1/25.
//

import SwiftUI

struct GroupDetailBoard: View {
    @Binding var navigationPath: NavigationPath
    let groupResponse: GroupResponse?
    let group: GroupModel
    @ObservedObject var groupStore: GroupStore
    @State var presentSideMenu = false
    @State private var showDatePicker: Bool = false
    
    // ÎÇ†Ïßú Í¥ÄÎ†® ÏÉÅÌÉú Ï∂îÍ∞Ä
    @State private var currentDate = Date()
    @State private var startDate = Date()
    @State private var endDate = Calendar.current.date(byAdding: .day, value: 7, to: Date()) ?? Date()
    @State private var isSelectingStartDate = true
    @State private var period = ""
    
    @State private var showImagePicker = false
    
    @State private var isAllCompleted = false // Î™®Îì† Î©§Î≤ÑÍ∞Ä Ïù∏Ï¶ùÌñàÎäîÏßÄ
    @State private var canCertifyToday = false // Ïò§Îäò Ïù∏Ï¶ù Í∞ÄÎä•ÌïúÏßÄ (ÏÑ†ÌÉùÌïú ÏöîÏùºÏù∏ÏßÄ)
    
    // ÎÇ†Ïßú Ìè¨Îß∑ÌÑ∞
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy.MM.dd"
        return formatter
    }()
    
    private let displayDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "MÏõî dÏùº"
        return formatter
    }()
    
    private let apiDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter
    }()
    
    // Í∑∏Î£π Í∏∞Í∞ÑÏùÑ ÌååÏã±ÌïòÎäî Í≥ÑÏÇ∞ ÌîÑÎ°úÌçºÌã∞
    private var groupStartDate: Date {
        let periodComponents = group.period.components(separatedBy: " - ")
        if let startString = periodComponents.first {
            return dateFormatter.date(from: startString) ?? Date()
        }
        return Date()
    }
    
    private var groupEndDate: Date {
        let periodComponents = group.period.components(separatedBy: " - ")
        if periodComponents.count > 1 {
            return dateFormatter.date(from: periodComponents[1]) ?? Date()
        }
        return Date()
    }
    
    // ÌòÑÏû¨ ÎÇ†ÏßúÍ∞Ä Í∑∏Î£π Í∏∞Í∞Ñ ÎÇ¥Ïóê ÏûàÎäîÏßÄ ÌôïÏù∏
    private var isCurrentDateInRange: Bool {
        let calendar = Calendar.current
        return calendar.compare(currentDate, to: groupStartDate, toGranularity: .day) != .orderedAscending &&
        calendar.compare(currentDate, to: groupEndDate, toGranularity: .day) != .orderedDescending
    }
    
    // Ïù¥Ï†Ñ ÎÇ†ÏßúÎ°ú Í∞à Ïàò ÏûàÎäîÏßÄ ÌôïÏù∏
    private var canGoPrevious: Bool {
        let calendar = Calendar.current
        guard let previousDate = calendar.date(byAdding: .day, value: -1, to: currentDate) else { return false }
        return calendar.compare(previousDate, to: groupStartDate, toGranularity: .day) != .orderedAscending
    }
    
    // Îã§Ïùå ÎÇ†ÏßúÎ°ú Í∞à Ïàò ÏûàÎäîÏßÄ ÌôïÏù∏
    private var canGoNext: Bool {
        let calendar = Calendar.current
        guard let nextDate = calendar.date(byAdding: .day, value: 1, to: currentDate) else { return false }
        return calendar.compare(nextDate, to: groupEndDate, toGranularity: .day) != .orderedDescending
    }
    
    // ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ìó¨Ìçº Ìï®Ïàò
        private func getAccessToken() -> String? {
            return UserDefaults.standard.string(forKey: "accessToken")
        }
    
    // checkDays API Ìò∏Ï∂ú Ìï®Ïàò (NetworkService ÏÇ¨Ïö©)
        private func checkDays() {
            print("üîç [checkDays] =================")
            print("üîç [checkDays] Ìï®Ïàò Ìò∏Ï∂úÎê®")
            print("üîç [checkDays] Í∑∏Î£π ID: \(group.id)")
            print("üîç [checkDays] ÌòÑÏû¨ ÎÇ†Ïßú: \(displayDateFormatter.string(from: currentDate))")
            print("üîç [checkDays] Í∑∏Î£π ÏÑ†ÌÉù ÏöîÏùº: \(group.selectedDaysString)")
            print("üîç [checkDays] ÌòÑÏû¨ canCertifyToday ÏÉÅÌÉú: \(canCertifyToday)")
            print("üîç [checkDays] =================")
            
            // ÌÜ†ÌÅ∞ ÌôïÏù∏
            guard let accessToken = getAccessToken() else {
                print("‚ùå [checkDays] Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§")
                canCertifyToday = false
                return
            }
            
            print("üîë [checkDays] ÌÜ†ÌÅ∞ ÌôïÏù∏ ÏôÑÎ£å")
            
            // API URL Íµ¨ÏÑ±
            let urlString = "\(APIConstants.baseURL)/room/checkDays/\(group.id)"
            
            print("üì° [checkDays] API URL: \(urlString)")
            
            guard let url = URL(string: urlString) else {
                print("‚ùå [checkDays] URL ÏÉùÏÑ± Ïã§Ìå®")
                canCertifyToday = false
                return
            }
            
            print("üöÄ [checkDays] API ÏöîÏ≤≠ ÏãúÏûë...")
            
            // NetworkServiceÎ•º ÏÇ¨Ïö©Ìïú ÎπÑÎèôÍ∏∞ API Ìò∏Ï∂ú
            Task {
                do {
                    let result: Bool = try await NetworkService.shared.get(url: url, accessToken: accessToken)
                    
                    // Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú UI ÏóÖÎç∞Ïù¥Ìä∏
                    await MainActor.run {
                        print("‚úÖ [checkDays] API Ìò∏Ï∂ú ÏÑ±Í≥µ: \(result)")
                        print("üîÑ [checkDays] canCertifyToday: \(canCertifyToday) -> \(result)")
                        canCertifyToday = result
                        print("üéØ [checkDays] ÏµúÏ¢Ö Ïù∏Ï¶ù Í∞ÄÎä• Ïó¨Î∂Ä: \(canCertifyToday)")
                        print("üñºÔ∏è [checkDays] UI ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - Ïù∏Ï¶ù Î≤ÑÌäº ÌëúÏãú Ïó¨Î∂Ä: \(isCurrentDateInRange && canCertifyToday)")
                    }
                    
                } catch {
                    // Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú ÏóêÎü¨ Ï≤òÎ¶¨
                    await MainActor.run {
                        print("‚ùå [checkDays] API Ìò∏Ï∂ú Ïã§Ìå®: \(error)")
                        
                        // HTTP ÏóêÎü¨ ÏΩîÎìú ÌôïÏù∏
                        if let nsError = error as NSError?, nsError.code == 500 {
                            print("‚ùå [checkDays] ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù (500)")
                            print("‚ùå [checkDays] Í∑∏Î£πÏùò days ÌïÑÎìúÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏùÑ Ïàò ÏûàÏäµÎãàÎã§")
                        }
                        
                        canCertifyToday = false
                        print("üîÑ [checkDays] canCertifyToday -> false (API Ìò∏Ï∂ú Ïã§Ìå®)")
                    }
                }
            }
            
            print("üîç [checkDays] Ï≤òÎ¶¨ ÏôÑÎ£å =================")
        }
        
        // oneDayCount API Ìò∏Ï∂ú Ìï®Ïàò (NetworkService ÏÇ¨Ïö©)
        private func checkOneDayCount() {
            print("üîç [DEBUG] checkOneDayCount Ìò∏Ï∂úÎê®")
            
            guard isCurrentDateInRange else {
                print("‚ùå [DEBUG] ÌòÑÏû¨ ÎÇ†ÏßúÍ∞Ä Í∑∏Î£π Í∏∞Í∞Ñ Ïô∏ÏûÖÎãàÎã§.")
                return
            }
            
            // ÌÜ†ÌÅ∞ ÌôïÏù∏
            guard let accessToken = getAccessToken() else {
                print("‚ùå [DEBUG] Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§")
                return
            }
            
            print("üîë [DEBUG] ÌÜ†ÌÅ∞ ÌôïÏù∏ ÏôÑÎ£å")
            
            // API URL Íµ¨ÏÑ±
            let dateString = apiDateFormatter.string(from: currentDate)
            let urlString = "\(APIConstants.baseURL)/room/oneDayCount?roomId=\(group.id)&date=\(dateString)"
            
            print("üì° [DEBUG] API URL: \(urlString)")
            print("üìÖ [DEBUG] ÏöîÏ≤≠ ÎÇ†Ïßú: \(dateString)")
            print("üè† [DEBUG] Í∑∏Î£π ID: \(group.id)")
            
            guard let url = URL(string: urlString) else {
                print("‚ùå [DEBUG] URL ÏÉùÏÑ± Ïã§Ìå®")
                return
            }
            
            print("üöÄ [DEBUG] API ÏöîÏ≤≠ ÏãúÏûë...")
            
            // NetworkServiceÎ•º ÏÇ¨Ïö©Ìïú ÎπÑÎèôÍ∏∞ API Ìò∏Ï∂ú
            Task {
                do {
                    let result: Bool = try await NetworkService.shared.get(url: url, accessToken: accessToken)
                    
                    // Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú UI ÏóÖÎç∞Ïù¥Ìä∏
                    await MainActor.run {
                        print("‚úÖ [DEBUG] API Ìò∏Ï∂ú ÏÑ±Í≥µ: \(result)")
                        isAllCompleted = result
                        print("üéØ [DEBUG] Ìï¥Îãπ ÎÇ†Ïßú Î™®Îì† Î©§Î≤Ñ Ïù∏Ï¶ù ÏôÑÎ£å: \(result)")
                    }
                    
                } catch {
                    // Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú ÏóêÎü¨ Ï≤òÎ¶¨
                    await MainActor.run {
                        print("‚ùå [DEBUG] API Ìò∏Ï∂ú Ïã§Ìå®: \(error)")
                        
                        // HTTP ÏóêÎü¨ ÏΩîÎìú ÌôïÏù∏
                        if let nsError = error as NSError? {
                            print("‚ùå [DEBUG] ÏóêÎü¨ ÏΩîÎìú: \(nsError.code)")
                        }
                        
                        isAllCompleted = false
                        print("üîÑ [DEBUG] isAllCompleted -> false (API Ìò∏Ï∂ú Ïã§Ìå®)")
                    }
                }
            }
        }
    
    var customBackButton: some View {
        Button(action: {
            if !navigationPath.isEmpty {
                navigationPath.removeLast()
            }
        }) {
            HStack {
                Image(systemName: "chevron.left")
                    .font(.system(size: 24))
            }
            .foregroundColor(.black)
        }
    }
    
    var hamburgerMenuButton: some View {
        Button(action: {
            presentSideMenu.toggle()
        }) {
            Image(systemName: "line.3.horizontal")
                .font(.system(size: 24))
                .foregroundColor(.black)
        }
    }
    
    var body: some View {
        ZStack {
            Color(hex: "F7F7F7")
                .edgesIgnoringSafeArea(.all)
            VStack {
                // ÏÉÅÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò (ÎÇ†Ïßú Î≤ÑÌäºÎì§ Ï†úÍ±∞)
                HStack {
                    customBackButton
                    
                    Spacer()
                    
                    // ÌòÑÏû¨ ÎÇ†Ïßú ÌëúÏãú Î∞è ÎÇ†Ïßú ÏÑ†ÌÉù Î≤ÑÌäº
                    Button(action: {
                        showDatePicker = true
                    }) {
                        Text(displayDateFormatter.string(from: currentDate))
                            .font(.custom("Pretendard-Medium", size: 18))
                            .foregroundColor(Color(hex: "464646"))
                    }
                    .sheet(isPresented: $showDatePicker) {
                        VStack(alignment: .leading) {
                            Text("ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî")
                                .font(.custom("Pretendard-Medium", size: 18))
                                .foregroundColor(Color(hex: "464646"))
                                .padding(.vertical, 20)
                            Divider()
                            
                            // Îã®Ïùº ÎÇ†Ïßú ÏÑ†ÌÉù (Í∑∏Î£π Í∏∞Í∞Ñ ÎÇ¥Î°ú Ï†úÌïú)
                            DatePicker(
                                "ÎÇ†Ïßú ÏÑ†ÌÉù",
                                selection: $currentDate,
                                in: groupStartDate...groupEndDate,
                                displayedComponents: [.date]
                            )
                            .datePickerStyle(.graphical)
                            .accentColor(Color(hex: "FF4B2F"))
                            .onChange(of: currentDate) { _ in
                                // ÎÇ†ÏßúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå API Ìò∏Ï∂ú
                                checkOneDayCount()
                            }
                            
                            Button(action: {
                                showDatePicker = false
                            }) {
                                Text("ÏÑ†ÌÉù ÏôÑÎ£å")
                                    .font(.custom("Pretendard-Medium", size: 16))
                                    .foregroundColor(.white)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 16)
                                    .background(Color(hex: "FF4B2F"))
                                    .cornerRadius(8)
                            }
                            
                            Spacer()
                        }
                        .padding(.horizontal, 16)
                        .presentationDetents([.height(UIScreen.main.bounds.height * 0.6)])
                    }
                    
                    Spacer()
                    
                    hamburgerMenuButton
                }
                .background(Color.clear)
                
                // Í∑∏Î£π Ï†ïÎ≥¥
                VStack(alignment: .leading) {
                    HStack {
                        Text(group.name)
                            .font(.custom("Pretendard-Bold", size: 22))
                            .foregroundColor(Color(hex: "171717"))
                        Spacer()
                        
                        Text(group.periodShort2)
                            .font(.custom("Pretendard-Medium", size: 14))
                            .foregroundColor(Color(hex: "858588"))
                    }
                    
                    HStack {
                        Text("Ï£ºÍ∏∞")
                            .font(.system(size: 14))
                            .padding(.vertical, 3)
                            .padding(.horizontal, 8)
                            .foregroundColor(Color(hex: "858588"))
                            .background(Color(hex: "F7F7F7"))
                            .cornerRadius(6)
                        
                        Text(group.selectedDaysString.toDisplayDays())
                            .font(.system(size: 14))
                            .foregroundColor(Color(hex: "464646"))
                    }
                    
                    HStack {
                        Text("Î≥¥ÏÉÅ")
                            .font(.system(size: 14))
                            .padding(.vertical, 3)
                            .padding(.horizontal, 8)
                            .foregroundColor(Color(hex: "858588"))
                            .background(Color(hex: "F7F7F7"))
                            .cornerRadius(6)
                        
                        Text(group.reward)
                            .font(.system(size: 14))
                            .foregroundColor(Color(hex: "464646"))
                    } // HStack
                }
                .padding(.horizontal, 22)
                .padding(.vertical, 20)
                .background(.white)
                .cornerRadius(16)
                .padding(.top, 20)
                
                
                // Ï§ëÍ∞Ñ Îû≠ÌÇπ Ï∂îÍ∞Ä
                VStack(alignment: .leading) {
                    CheckPointRankingView(roomId: group.id)
                }
                //.padding(.horizontal, 22)
                .padding(.vertical, 20)
                
                
                ZStack {
                    // ÎÇ†Ïßú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò (Í∑∏Î£π Ï†ïÎ≥¥ ÏïÑÎûòÎ°ú Ïù¥Îèô)
                    HStack {
                        // Ïù¥Ï†Ñ ÎÇ†Ïßú Î≤ÑÌäº
                        Button(action: {
                            if canGoPrevious {
                                currentDate = Calendar.current.date(byAdding: .day, value: -1, to: currentDate) ?? currentDate
                                checkOneDayCount()
                            }
                        }) {
                            Image(systemName: "chevron.left")
                                .frame(width: 6, height: 12)
                                .foregroundColor(canGoPrevious ? Color(hex: "8691A2") : Color(hex: "C6C6C6"))
                                .padding(.vertical, 12)
                                .padding(.horizontal, 15)
                                .background(.white)
                                .cornerRadius(8)
                        }
                        .disabled(!canGoPrevious)
                        
                        Spacer()
                        
                        // Îã§Ïùå ÎÇ†Ïßú Î≤ÑÌäº
                        Button(action: {
                            if canGoNext {
                                currentDate = Calendar.current.date(byAdding: .day, value: 1, to: currentDate) ?? currentDate
                                checkOneDayCount()
                            }
                        }) {
                            Image(systemName: "chevron.right")
                                .frame(width: 6, height: 12)
                                .foregroundColor(canGoNext ? Color(hex: "8691A2") : Color(hex: "C6C6C6"))
                                .padding(.vertical, 12)
                                .padding(.horizontal, 15)
                                .background(.white)
                                .cornerRadius(8)
                        }
                        .disabled(!canGoNext)
                    }
                    .padding(.vertical, 50)
                    
                    VStack {
                        // ÏÑ†ÌÉùÎêú ÎÇ†ÏßúÏùò Î≥¥Îìú ÎÇ¥Ïö© ÌëúÏãú (Í∏∞Í∞Ñ ÎÇ¥ ÎÇ†ÏßúÎßå)
                        if isCurrentDateInRange {
                            // Ïó¨Í∏∞Ïóê Î≥¥Îìú ÎÇ¥Ïö© ÌëúÏãú
                            Text("ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: \(displayDateFormatter.string(from: currentDate))\n         (ÌôïÏù∏Ïö©)")
                                .font(.custom("Pretendard-Medium", size: 16))
                                .foregroundColor(Color(hex: "464646"))
                                .padding()
                        } else {
                            // Í∏∞Í∞Ñ Ïô∏ ÎÇ†ÏßúÏùº ÎïåÎäî Î©îÏãúÏßÄ ÌëúÏãú
                            Text("Ìï¥Îãπ ÎÇ†ÏßúÎäî Í∑∏Î£π ÌôúÎèô Í∏∞Í∞ÑÏù¥ ÏïÑÎãôÎãàÎã§.")
                                .font(.custom("Pretendard-Medium", size: 16))
                                .foregroundColor(Color(hex: "8691A2"))
                                .padding()
                        }
                    }
                }
                
                Spacer()
                
                // Ïù∏Ï¶ùÌïòÍ∏∞ Î≤ÑÌäº (Í∏∞Í∞Ñ ÎÇ¥ ÎÇ†ÏßúÏù¥Î©¥ÏÑú ÏÑ†ÌÉùÌïú ÏöîÏùºÏùº ÎïåÎßå ÌëúÏãú)
                                if isCurrentDateInRange && canCertifyToday {
                    // Í∑∏Î£π ÎßåÎì§Í∏∞ Î≤ÑÌäº
                    HStack {
                        Spacer()
                        Button {
                            navigationPath.append(NavigationDestination.certification)
                        } label: {
                            HStack {
                                Image(systemName: "camera.fill")
                                    .font(.system(size: 12, weight: .bold))
                                    .foregroundColor(.white)
                                Text("Ïù∏Ï¶ùÌïòÍ∏∞")
                                    .foregroundColor(.white)
                                    .font(.custom("Pretendard-Medium", size: 16))
                            }
                            .padding(.vertical, 11)
                            .padding(.horizontal, 18)
                            .background(Color(hex: "FF4B2F"))
                            .cornerRadius(30)
                        }
                        .padding(.bottom, 42)
                    }
                    .padding(.horizontal, 4)
                    
                }
            }
            .padding(.horizontal, 20)
            .navigationBarBackButtonHidden(true)
            .navigationBarTitleDisplayMode(.inline)
            .onAppear {
                // Ï¥àÍ∏∞ ÎÇ†ÏßúÎ•º Í∑∏Î£π ÏãúÏûë ÎÇ†ÏßúÎ°ú ÏÑ§Ï†ï
                currentDate = groupStartDate
                checkDays() // ÏÑ†ÌÉùÌïú ÏöîÏùº ÌôïÏù∏
                checkOneDayCount()
            }
            .onChange(of: currentDate) { _ in
                // ÎÇ†ÏßúÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ API Ìò∏Ï∂ú
                checkOneDayCount()
            }
            
            SideView(isShowing: $presentSideMenu, direction: .trailing) {
                SideMenuViewContents(presentSideMenu: $presentSideMenu)
            }
            
        }
    }
}

extension String {
    // "ÏõîÌôîÏàò" -> "Ïõî, Ìôî, Ïàò"
    func toDisplayDays() -> String {
        return self.map { String($0) }.joined(separator: ", ")
    }
}

#Preview {
    // ÌÖåÏä§Ìä∏Ïö©
    let calendar = Calendar.current
    let startDate = calendar.date(from: DateComponents(year: 2025, month: 7, day: 8)) ?? Date()
    let endDate = calendar.date(from: DateComponents(year: 2025, month: 7, day: 9)) ?? Date()
    let testGroup = GroupModel(
        id: 11,
        name: "ÏïÑÏπ® Ïö¥Îèô Ï±åÎ¶∞ÏßÄ",
        startDate: startDate,
        endDate: endDate,
        reward: "ÎßõÏûàÎäî Î∏åÎü∞Ïπò Î®πÍ∏∞",
        partners: [],
        selectedDaysString: "ÏõîÌôîÏàòÎ™©Í∏à",
        selectedDaysCount: 5,
    )
    
    // ÌÖåÏä§Ìä∏Ïö© GroupStore ÏÉùÏÑ±
    let testGroupStore = GroupStore()
    
    // StatefulPreviewWrapperÎ•º ÏÇ¨Ïö©ÌïòÏó¨ NavigationPath ÏÉÅÌÉú Í¥ÄÎ¶¨
    StatefulPreviewWrapper(NavigationPath()) { path in
        NavigationStack(path: path) {
            GroupDetailBoard(
                navigationPath: path,
                groupResponse: nil,
                group: testGroup,
                groupStore: testGroupStore
            )
        }
    }
}
